package parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;

import ast.*;
import interpreter.Interpreter;

parser code {: 
  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex, sf);
    lexer = lex;
  }

  public void report_fatal_error(String message, Object info) {
    Interpreter.fatalError(message + " (" + info + ")", Interpreter.EXIT_PARSING_ERROR);
  }

  ast.Location loc(int line, int column) {
    return new ast.Location(line, column);
  }

:};

terminal PLUS, MINUS, LPAREN, RPAREN, TIMES, UMINUS, DOT, NIL, MUTABLE, INT, REF, Q,
         LessEqual, GreaterEqual, Equal, NotEqual, Less, Greater, AND, OR, NOT, ASSIGN,
         RETURN, SEMICOLON, CAST, LCURLY, RCURLY, IF, ELSE, WHILE, PRINT, COMMA, LSQUARE, RSQUARE;
terminal Long    INTCONST;
terminal String    IDENT;


non terminal Program          program;
non terminal Expr             expr;
non terminal BinaryExpr       binaryExpr;
non terminal Cond             cond;
non terminal StmtList         stmtList;
non terminal Stmt             stmt;
non terminal FuncDef          funcDef;
non terminal FuncDefList      funcDefList;
non terminal FormalDeclList   formalDeclList;
non terminal FormalDeclList   neFormalDeclList;
non terminal ExprList         exprList;
non terminal ExprList         neExprList;
non terminal String           varDecl;
non terminal Object           type;

precedence left AND,OR;
precedence left NOT;
precedence left LessEqual,GreaterEqual,Equal,NotEqual,Less,Greater;
precedence left DOT;
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS,CAST;
precedence left ELSE;

start with program;

program ::= funcDefList:fl
            {: RESULT = new Program(fl, loc(flleft, flright)); :}
         ;

funcDefList ::= funcDef:f funcDefList:fl
            {: RESULT = new FuncDefList(f, fl, loc(fleft, fright)); :}
            |/* empty string */
            {: RESULT = null; :}   
         ;  
varDecl ::= type IDENT:id
            {: RESULT = id; :}
         |  MUTABLE type IDENT:id
            {: RESULT = id; :}
         ;

type ::= Q
      | INT
      | REF
      ;

funcDef ::= varDecl:v LPAREN formalDeclList:dl RPAREN LCURLY stmtList:sl RCURLY
            {: RESULT = new FuncDef(v, dl, sl, loc(vleft, vright)); :}
         ;         

formalDeclList ::= neFormalDeclList:dl
            {: RESULT = dl; :}
            |/* empty string */
            {: RESULT = null; :}
         ; 

neFormalDeclList ::= varDecl:v COMMA neFormalDeclList:dl
            {: RESULT = new FormalDeclList(v, dl, loc(vleft, vright)); :}
            |varDecl:v
            {: RESULT = new FormalDeclList(v, null, loc(vleft, vright)); :} 
         ;

stmtList ::= stmt:s stmtList:sl
            {: RESULT = new StmtList(s, sl, loc(sleft, sright)); :}
         |/* empty string */
            {: RESULT = null; :}   
         ;

stmt ::= RETURN expr:e SEMICOLON
         {: RESULT = new ReturnStmt(e, loc(eleft, eright)); :}
      |  varDecl:v ASSIGN expr:e SEMICOLON
         {: RESULT = new DeclStmt(v, e, loc(vleft, vright)); :}
      |  IDENT:i ASSIGN expr:e SEMICOLON
         {: RESULT = new UpdateStmt(i, e, loc(ileft, iright)); :}
      |  IDENT:f LPAREN exprList:el RPAREN SEMICOLON
         {: RESULT = new CallStmt(f,el, loc(fleft, fright)); :}
      |  IF LPAREN cond:c RPAREN stmt:s
         {: RESULT = new IfStmt(c, s, null,loc(cleft, cright)); :}
      |  IF LPAREN cond:c RPAREN stmt:s1 ELSE stmt:s2
         {: RESULT = new IfStmt(c, s1, s2,loc(cleft, cright)); :}
      |  WHILE LPAREN cond:c RPAREN stmt:s
         {: RESULT = new WhileStmt(c, s,loc(cleft, cright)); :}   
      |  PRINT expr:e SEMICOLON
         {: RESULT = new PrintStmt(e,loc(eleft, eright)); :}
      |  LCURLY stmtList:sl RCURLY
         {: RESULT = sl; :}
      ;


exprList ::= neExprList:el
            {: RESULT = el; :}
            |/* empty string */
            {: RESULT = null; :}
         ; 

neExprList ::= expr:e COMMA neExprList:el
            {: RESULT = new ExprList(e, el, loc(eleft, eright)); :}
            |  expr:e
            {: RESULT = new ExprList(e, null, loc(eleft, eright)); :} 
         ;

expr ::= NIL:n
         {: RESULT = new NilExpr(loc(nleft, nright)); :}
      |  INTCONST:c
         {: RESULT = new ConstExpr(c, loc(cleft, cright)); :}
      |  IDENT:i
         {: RESULT = new IdentExpr(i, loc(ileft, iright)); :}
      |  MINUS expr:e
         {: RESULT = new UnaryExpr(e, loc(eleft, eleft)); :}
         %prec UMINUS
      |  binaryExpr:e
         {: RESULT = e; :}
      |  LPAREN type RPAREN expr:e
         {: RESULT = e; :}
         %prec CAST
      |  IDENT:f LPAREN exprList:el RPAREN
         {: RESULT = new CallExpr(f,el, loc(fleft, fright)); :}
      |  LSQUARE binaryExpr:e RSQUARE
         {: RESULT = new ConExpr(e, loc(eleft, eright)); :}
      |  LPAREN expr:e RPAREN
         {: RESULT = e; :}
      ;

binaryExpr ::= expr:e1 PLUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.PLUS, e2, loc(e1left, e1right)); :}
            |  expr:e1 MINUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.MINUS, e2, loc(e1left, e1right)); :}
            |  expr:e1 TIMES expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.TIMES, e2, loc(e1left, e1right)); :}
            |  expr:e1 DOT expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.DOT, e2, loc(e1left, e1right)); :}   
            ;

cond ::= expr:e1 LessEqual expr:e2
            {: RESULT = new CompCond(e1, CompCond.LessEqual, e2, loc(e1left, e1right)); :}
         |  expr:e1 GreaterEqual expr:e2
            {: RESULT = new CompCond(e1, CompCond.GreaterEqual, e2, loc(e1left, e1right)); :}
         |  expr:e1 Equal expr:e2
            {: RESULT = new CompCond(e1, CompCond.Equal, e2, loc(e1left, e1right)); :}
         |  expr:e1 NotEqual expr:e2
            {: RESULT = new CompCond(e1, CompCond.NotEqual, e2, loc(e1left, e1right)); :}
         |  expr:e1 Less expr:e2
            {: RESULT = new CompCond(e1, CompCond.Less, e2, loc(e1left, e1right)); :}
         |  expr:e1 Greater expr:e2
            {: RESULT = new CompCond(e1, CompCond.Greater, e2, loc(e1left, e1right)); :}
         |  cond:c1 AND cond:c2
            {: RESULT = new BinaryCond(c1, BinaryCond.AND, c2, loc(c1left, c1right)); :}
         |  cond:c1 OR cond:c2
            {: RESULT = new BinaryCond(c1, BinaryCond.OR, c2, loc(c1left, c1right)); :}
         |  NOT cond:c
            {: RESULT = new UnaryCond(c, loc(cleft, cleft)); :}
         |  LPAREN cond:c RPAREN
            {: RESULT = c; :}         
         ;